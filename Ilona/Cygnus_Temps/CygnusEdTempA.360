
 /***************************************************************************/
 /*                 LogBot v1.1beta - Channel Logging Robot                 */
 /*-------------------------------------------------------------------------*/
 /*                  (c) Copyright 1997 by Tristan Greaves                  */
 /*                           All rights reserved                           */
 /*                                                                         */
 /*    The material within is an unpublished copyrighted work containing    */
 /*    trade secrets or otherwise sensitive information. This copy has      */
 /*    been provided on the basis of strict confidentiality and on the      */
 /*    express understanding that it may not be reproduced or revealed      */
 /*    to any person, in whole or in part, without express written per-     */
 /*    mission from Tristan Greaves, who is the sole owner of copyright     */
 /*    and all other rights therein.                                        */
 /*                                                                         */
 /***************************************************************************/

/* The Main File */

#include <stdio.h>                             /* IO */
#include <stdlib.h>                            /* Exit() */
#include <stdarg.h>                            /* Lists */
#include <string.h>                            /* Strings */
#include <time.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/socket.h>                        /* Socket Library */
#include <sys/errno.h>                         /* Socket Library Error Codes */
#include <sys/time.h>
#include <netinet/in.h>
#include <netdb.h>

#include "main.h"
#include "config.h"
#include "server.h"
#include "parsing.h"
#include "logging.h"

#ifdef AMIGA

#include <exec/libraries.h>
#include <proto/exec.h>
#include <clib/socket_inlines.h>

struct Library *SocketBase ;

#endif /* AMIGA */

struct hostent *hp ;

struct in_addr addr;
struct sockaddr_in server ;

int my_socket, joins, parts, nomess ;  /* Socket and statistics */
int sport ;

char log_day [3] ;         /* Storage for log start day */
char systemlog [100] ;
char channellog [100] ;
char userfile [100] ;
char server_name [40] ;    /* Server name */
char channel [15]     ;    /* Channel name */
char nickname [15]    ;    /* Bot nickname to use */
char servpasswd [15]  ;    /* Server pw to use */
char username [20] ;       /* WHOIS Username */
char realname [40]  ;      /* WHOIS Realname */
int  rejoin_kick ;         /* 1 = Join on kick, 0 = Don't! */
int  connected ;           /* Connected to server? */
int  logging ;             /* 1 = Logging channel, 0 = Not logging channel */
int  invisible ;           /* 1 = Make bot invisible, 0 = Don't */
int  log_archive ;         /* 1 = 24 hr archive, 0 = Don't */
int  log_stamp ;           /* 0 = No, 1 = Stamp time, 2 = Stamp d/t */
int  log_stats ;           /* At end of log, record stats? */
int  html_log ;            /* 1 = Enable HTML log, 0 = Don't */
int  html_protect ;        /* 1 = HTML protection, 0 = None */

/* Note: Following sysop definitions will be made obselete soon */

char sysop_user [20] ;     /* Sysop name */
char sysop_host [40] ;     /* Sysop's host */

/* Replacements are as follows */

int no_users ;
char user_id[20], user_host[40]. user_status[10] ;

char html_header [100] ;   /* HTML header filename */

#define LBVERS "LogBot v1.1beta (Not For Distribution). Coded by Tristan Greaves. Registered to: Tristan Greaves"

/* This define only exists if this is a registered version */

#define LBREGI "Registered to: Tristan Greaves."

/* Following defines required for true portability */

#define FALSE 0
#define TRUE 1

#ifndef AMIGA

#define stricmp(s1,s2) strcasecmp(s1,s2)

#endif

/* ---------------------------------------------------------------- */

#include "config.c"
#include "server.c"
#include "parsing.c"
#include "logging.c"

/* ---------------------------------------------------------------- */

#ifdef AMIGA

void open_libs(void) {

   SocketBase = OpenLibrary("bsdsocket.library", 2) ;

   if (SocketBase == NULL) {

      printf("Error: Couldn't open bsdsocket.library!\n") ;
      printf("Have you got AmiTCP running?\n") ;

      do_sys_log("Error: Couldn't open bsdsocket.library!") ;

      do_sys_log("LogBot v1.1beta closed.\n") ;

      exit(100) ;

   }

}

void close_libs(void) {

    if (SocketBase) {

      CloseLibrary(SocketBase) ;
      SocketBase = NULL ;

    }

}

#endif /* AMIGA */

void exit_nicely (int ec) {

   if (my_socket) {

      #ifdef AMIGA   

      CloseSocket (my_socket) ;
      
      #else

      close (my_socket) ;

      #endif /* AMIGA */

   }

   #ifdef AMIGA

   close_libs() ;

   #endif /* AMIGA */

   do_sys_log ("LogBot v1.1beta closed.\n") ;
   exit (ec) ;

}

void SigInt (int sig) {

   /* Called when user requests a break */
   /* Note, this doesn't exit "cleanly", from an IRC server's view */

   do_sys_log("User break detected.") ;

   if (connected==1) {

      do_sys_log ("There were %i joins and %i parts.", joins, parts) ;
      do_sys_log ("There were %i public messages.", nomess) ;

      SendToServer("QUIT :Local shutdown.") ;

   }

   exit_nicely(0) ;  

}

void main(int argc, char * argv[] ) {

   int i ;

   struct timeval timer ;

   fd_set rd ;

   char buffer [512] ;

   long date ;

   char *temp ;
  
   timer.tv_sec  = 40 ;
   timer.tv_usec = 0 ;

   #ifdef AMIGA

   printf("LogBot v1.1beta (AmigaOS). (c) Copyright 1997 Tristan Greaves.\n") ;

   #else

   printf("LogBot v1.1beta (Linux). (c) Copyright 1997 Tristan Greaves.\n") ;

   #endif

   #ifdef LBREGI

   printf("%s\n\n",LBREGI) ;  /* Registered text */

   #else

   printf("** Unregistered Version **\n\n") ;

   #endif

   if (argc == 1) {

      /* Use default config file */

      #ifdef AMIGA

         grab_config("logbot.config") ;   /* Amiga paths */

      #else

         grab_config(".logbotrc") ;    /* Unix paths */

      #endif   /* AMIGA */

   } else {

      /* Use user defined config file */
      /* Extra trap for Amiga WB startup */

      #ifdef AMIGA

      if (strlen (argv[1]) == 0) {

         grab_config ("logbot.config") ;   /* Zero length filename */

      } else {

         grab_config( argv[1] ) ;

      }

      #else

      grab_config ( argv[1] ) ;

      #endif

   }

   /* Store opening date number (For log file archiving */

   date = time (NULL) ;

   temp = DateToString (date) ;

   strncpy (log_day, temp, 2) ;

   do_sys_log("LogBot v1.1beta opened.") ;

   #ifdef AMIGA

   open_libs() ;

   #endif /* AMIGA */

   do_sys_log("Looking for host %s", server_name ) ;

   printf("Trying %s (port %d) ....\n\n", server_name, sport) ;

   joins = 0 ;

   parts = 0 ;

   nomess = 0 ;    /* Set stats */

   /* We need to set up our traps for CTRL C as well */

   signal (SIGINT, SigInt) ;   /* Warning: Bugged */

   get_host_stuff( server_name ) ;

   prepare_socket() ;

   do_connect() ;

   /* Call external routine five times, get five lines... */
   /* Note: No parsing done on the received buffer yet.   */

   i = 1 ;

   /* This loop will never end. :-) */

   while (i == 1) {
   
      FD_ZERO(&rd) ;

      FD_SET(my_socket, &rd) ;

      select (FD_SETSIZE, &rd, NULL, NULL, &timer) ;

      /* Stuff out our socket */

      grab_server_line ( buffer ) ;

      parse_line (buffer ) ;

   }

   exit_nicely(0) ;  /* Handles socket shutdown + exit message */

}
